import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

public class MapExample {
    public static void main(String[] args) {
        // ‚úÖ Creating a HashMap (Unordered)
        Map<String, Integer> hashMap = new HashMap<>();

        // ‚úÖ put(key, value): Inserts a key-value pair
        hashMap.put("Alice", 25);
        hashMap.put("Bob", 30);
        hashMap.put("Charlie", 35);
        System.out.println("1Ô∏è‚É£ HashMap after put: " + hashMap);
        // Output: {Alice=25, Bob=30, Charlie=35} (Order may vary)

        // ‚úÖ get(key): Retrieves value associated with key
        System.out.println("2Ô∏è‚É£ get('Alice'): " + hashMap.get("Alice"));
        // Output: 25

        // ‚úÖ containsKey(key): Checks if key exists
        System.out.println("3Ô∏è‚É£ containsKey('Bob'): " + hashMap.containsKey("Bob"));
        // Output: true

        // ‚úÖ containsValue(value): Checks if value exists
        System.out.println("4Ô∏è‚É£ containsValue(40): " + hashMap.containsValue(40));
        // Output: false

        // ‚úÖ size(): Returns the number of key-value pairs
        System.out.println("5Ô∏è‚É£ size(): " + hashMap.size());
        // Output: 3

        // ‚úÖ remove(key): Removes a key-value pair
        hashMap.remove("Charlie");
        System.out.println("6Ô∏è‚É£ remove('Charlie'): " + hashMap);
        // Output: {Alice=25, Bob=30}

        // ‚úÖ isEmpty(): Checks if the map is empty
        System.out.println("7Ô∏è‚É£ isEmpty(): " + hashMap.isEmpty());
        // Output: false

        // ‚úÖ keySet(): Returns all keys
        System.out.println("8Ô∏è‚É£ keySet(): " + hashMap.keySet());
        // Output: [Alice, Bob]

        // ‚úÖ values(): Returns all values
        System.out.println("9Ô∏è‚É£ values(): " + hashMap.values());
        // Output: [25, 30]

        // ‚úÖ entrySet(): Returns all key-value pairs
        System.out.println("üîü entrySet(): " + hashMap.entrySet());
        // Output: [Alice=25, Bob=30]

        // ‚úÖ clear(): Removes all entries
        hashMap.clear();
        System.out.println("1Ô∏è‚É£1Ô∏è‚É£ clear(): " + hashMap);
        // Output: {}

        // ‚úÖ Checking again if empty
        System.out.println("1Ô∏è‚É£2Ô∏è‚É£ isEmpty after clear(): " + hashMap.isEmpty());
        // Output: true

        // ‚úÖ Using LinkedHashMap (Maintains Insertion Order)
        Map<String, Integer> linkedHashMap = new LinkedHashMap<>();

        linkedHashMap.put("USA", 1);
        linkedHashMap.put("India", 91);
        linkedHashMap.put("UK", 44);
        System.out.println("1Ô∏è‚É£3Ô∏è‚É£ LinkedHashMap after put: " + linkedHashMap);
        // Output: {USA=1, India=91, UK=44} (Maintains order)

        // ‚úÖ Accessing Elements
        System.out.println("1Ô∏è‚É£4Ô∏è‚É£ get('India'): " + linkedHashMap.get("India"));
        // Output: 91

        // ‚úÖ Iterating using for-each
        System.out.println("1Ô∏è‚É£5Ô∏è‚É£ Iterating through LinkedHashMap:");
        for (Map.Entry<String, Integer> entry : linkedHashMap.entrySet()) {
            System.out.println("    Key: " + entry.getKey() + ", Value: " + entry.getValue());
        }
        // Output:
        // Key: USA, Value: 1
        // Key: India, Value: 91
        // Key: UK, Value: 44
    }
}
